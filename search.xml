<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>教师节的这天</title>
      <link href="/2018/09/10/follow-heart01/"/>
      <content type="html"><![CDATA[<p>其实，在这样一个无所事实的夜晚，如果不是教师节的“引子”诱导着我回忆少时的成长，真的找不到什么契机来写下此刻的心情💢。</p><a id="more"></a><p>其实，想想都一样，我们总想着等自己长大了再去好好报答我们的父母，我们总想着学有所成了再去好好报答我们的老师，似乎也总想着有着足够渊博的代码经验才去总结我们所遇到的问题。</p><p>答案是：我们始终在消费和透支未来的时间和理想去做当下我们能够完成的“小事”。</p><p>这真的是一件小事，在你看来，但是好多时候我们都败给了小事。</p><p>刚才，自己还突然想过这么一段话： “朽木遇巧匠，化腐朽为神奇”。如遇巧匠，多磨多砺，匠心难寻，自强不息。</p><p>好了，汤汁已满，多浇则腻。</p>]]></content>
      
      
        <tags>
            
            <tag> mood </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue项目的初探</title>
      <link href="/2017/06/21/new-vue/"/>
      <content type="html"><![CDATA[<blockquote><p>这是刚接触vue的一个项目，开发功能的逻辑上和jquery有很大的差异，有很多的担心也有不少的惊喜，就这样，堆出了一个展现为主的网站模型</p></blockquote><h3 id="First-blood"><a href="#First-blood" class="headerlink" title="First blood"></a>First blood</h3><p>首先，来说一下项目的路由配置，唯一要注意的是：pc和app是同在一个体系中</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入路由</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各个组件文件进行切割，形成按需加载</span></span><br><span class="line"><span class="keyword">const</span> index = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "index" */</span> <span class="string">'./page/index/index.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> pc= <span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "pc" */</span><span class="string">'./page/pc/index.vue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断环境</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judegPcOrMobile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 根据ua判断pc端还是mobile端, 目前的判断不一定很全</span></span><br><span class="line">  <span class="keyword">let</span> routerName = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (isAndroid || isIOS || isApp || isWechat) &#123; <span class="comment">// 手机端</span></span><br><span class="line">    routerName = &#123;<span class="attr">name</span>: <span class="string">'index'</span>&#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// pc</span></span><br><span class="line">    routerName = &#123;<span class="attr">name</span>: <span class="string">'pc'</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> routerName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="comment">// mode 项目中使用的是hash模式，也可以使用 history 模式需要nginx配置路径并在前端中添加 * 路由对应的 notFound 页面</span></span><br><span class="line">  mode: <span class="string">'hash'</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>, </span><br><span class="line">      <span class="comment">// redirect 支持function配置项</span></span><br><span class="line">      redirect: judegPcOrMobile</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/index'</span>, </span><br><span class="line">      component: index, </span><br><span class="line">      name: <span class="string">'index'</span></span><br><span class="line">     &#125;,</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载路由, 创造vue实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>, </span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">'router-view'</span>) <span class="comment">// 这里的 'router-view' 在这里是默认设置还是怎么一回事，无法进行删改，但是达到了我们想要的效果，渲染整个路由组件（页面）</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出vue实例，方便调试</span></span><br><span class="line"><span class="built_in">window</span>.$vm = app</span><br></pre></td></tr></table></figure><p>当然上面的路由模块部分最好单独出来，判断浏览器环境的部分也可以归入到utils中，由于是多页面应用，没有加入单页面的主入口文件，这少了一些公用方法的书写位置。</p><h3 id="Second-blood"><a href="#Second-blood" class="headerlink" title="Second blood"></a>Second blood</h3><p>项目中使用了 <code>vue-resource</code> 来封装常用的api请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url, params, type=<span class="string">'get'</span>, loading=false</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">    showLoading()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (type.toLowerCase() == <span class="string">'get'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!url) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'url 无效'</span>); </span><br><span class="line">        <span class="keyword">return</span> reject;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      Vue.http.get(</span><br><span class="line">        url+parseParam(params),</span><br><span class="line">       &#123;&#125;,</span><br><span class="line">       &#123;<span class="attr">emulateJSON</span>: <span class="literal">true</span>&#125;</span><br><span class="line">      ).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(res.body.code==<span class="number">200</span> || res.body.status == <span class="number">1</span> || res.body.errcode == <span class="number">0</span>) &#123;</span><br><span class="line">          resolve(res.body);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.body.code==<span class="number">401</span> || res.body.errcode == <span class="number">3001</span>)&#123;</span><br><span class="line">          gotoLogin()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          reject(res.body);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">          hideLoading();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).catch(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(res.body);</span><br><span class="line">        <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">          hideLoading();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      Vue.http.post(</span><br><span class="line">        url,</span><br><span class="line">        params,</span><br><span class="line">        &#123;<span class="attr">emulateJSON</span>: <span class="literal">true</span>&#125;</span><br><span class="line">      ).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve(res.body);</span></span><br><span class="line">        <span class="keyword">if</span>(!url)&#123; <span class="built_in">console</span>.log(<span class="string">'url 无效'</span>); <span class="keyword">return</span> reject;&#125;</span><br><span class="line">        <span class="keyword">if</span>(res.body.code==<span class="number">200</span> || res.body.status == <span class="number">1</span>) &#123;</span><br><span class="line">          resolve(res.body);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.body.code==<span class="number">401</span>)&#123;</span><br><span class="line">          gotoLogin();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          reject(res.body);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(loading)&#123; hideLoading();&#125;</span><br><span class="line"></span><br><span class="line">      &#125;).catch(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(res.body);</span><br><span class="line">        <span class="keyword">if</span>(loading)&#123;hideLoading();&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码封装请求的过程不是最重要的，最重要的就是理解了 <code>promise</code> 封装异步操作这个概念，和处理ajax请求时的细节（比如loading）</p><h3 id="Third-blood"><a href="#Third-blood" class="headerlink" title="Third blood"></a>Third blood</h3><p>关于页面中的弹窗，目前遇到的弹窗有以下几种：</p><ol><li>页面处于顶端（弹窗大小固定居中）</li><li>页面处于中间位置 （弹窗大小固定居中）</li><li>弹窗内可以进行滑动</li><li>弹窗从底部进行弹出</li><li>提示弹层</li></ol><p>其中从底部弹出的动画效果使用vue的过渡很不顺手，使用插件有些浪费，于是使用了基础的css3动画，当然这也不是最佳的方案</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> slideUp &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(100%);</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(0);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">@<span class="keyword">keyframes</span> slideDown &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(0);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(100%);</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom-modal</span><span class="selector-class">.animation_up</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: slideUp .<span class="number">6s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom-modal</span><span class="selector-class">.animation_down</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: slideDown .<span class="number">6s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.modal</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:fixed;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">1000</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom-modal</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:fixed;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>:<span class="number">0%</span>;</span><br><span class="line">  <span class="attribute">-webkit-backface-visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0,0,0);</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">1000</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Four-blood"><a href="#Four-blood" class="headerlink" title="Four blood"></a>Four blood</h3><p>接下来，不得不说到 <code>vuex</code> 了, 在对状态管理的理解上，初步的理解就是核心并且公用的可变数据存在在store中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'@/plugins/logger'</span></span><br><span class="line"><span class="keyword">import</span>  menu <span class="keyword">from</span>  <span class="string">'./modules/menu'</span></span><br><span class="line"><span class="keyword">import</span>  modal <span class="keyword">from</span>  <span class="string">'./modules/modal'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    menu,</span><br><span class="line">    modal</span><br><span class="line">  &#125;,</span><br><span class="line">  strict: debug,</span><br><span class="line">  plugins: debug ? [createLogger()] : []</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  store.hotUpdate(&#123;</span><br><span class="line">    modules: &#123;</span><br><span class="line">      menu,</span><br><span class="line">      modal</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></p><p>store 是由 module 层构成的，在 module 层中划分出了 【mutation】静态 和 【action】动态 这两个指挥官，它们通过调用 <code>mutation-type</code> 和 <code>actions-type</code> 这两个文件中定义的常量方法来进行：<strong>定义状态</strong>，<strong>初始化状态</strong>  和 <strong>改变状态</strong></p><p>关于它的调用，一般是如下的格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mtypes <span class="keyword">from</span> <span class="string">'../../../store/mutation-types.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改状态</span></span><br><span class="line"><span class="keyword">this</span>.$store.commit(mtypes.CHANGE_MASK, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取状态</span></span><br><span class="line">  computed: &#123; </span><br><span class="line">      ...mapGetters([</span><br><span class="line">        <span class="string">'modalJson'</span>, <span class="comment">// 初始化状态时定义的getter方法</span></span><br><span class="line">      ])</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中，使用了  <code>logger</code> 这个插件来进行监测，开发的时候挺方便.</p><p>关于vue项目的初次尝试就先总结到这里，后面还会有一些更深入的讲解。</p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux解压相关命令</title>
      <link href="/2017/05/08/tar/"/>
      <content type="html"><![CDATA[<blockquote><p>熟悉下 linux 对压缩和解压缩文件的命令</p></blockquote><p>首先压缩文件的格式一般分为：<code>*.tar</code> <code>*.tar.gz</code> <code>*.tar.bz2</code> <code>*.tar.Z</code> 这几类，关于这几类压缩格式的历史就不多拓展了，直接开始操作：</p><a id="more"></a><ol><li>解压 <code>.tar</code> 相关的文件（默认文件中内容被解压到当前文件夹）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xf *.tar</span><br><span class="line">tar -xzf *.tar.gz</span><br><span class="line">tar -xjf *.tar.bz2</span><br><span class="line">tar -xZf *.tar.Z</span><br></pre></td></tr></table></figure><ol start="2"><li>解压 <code>.tar</code> 压缩包到指定的文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xf *.tar -C directoryname</span><br></pre></td></tr></table></figure><ol start="3"><li>其他相关的命令参数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-c  建立压缩档案</span><br><span class="line">-x  进行解压</span><br><span class="line">-t  查看内容</span><br><span class="line">-v  显示过程</span><br><span class="line">-r  追加内容</span><br><span class="line">-u  更新内容</span><br><span class="line">-f  使用档案名字</span><br><span class="line">-j  .bz2后缀的bz2压缩文件</span><br><span class="line">-z  .gz后缀的gzip压缩文件</span><br><span class="line">-Z  .Z后缀的compress压缩文件</span><br></pre></td></tr></table></figure><ol start="4"><li>关于解压 rar 文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install unrar</span><br><span class="line">unrar x 解压的目录</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>package-lock文件</title>
      <link href="/2017/04/03/package-lock-json/"/>
      <content type="html"><![CDATA[<p>今天在安装reduce的时候，ajv模块出现报错，于是就一通google</p><p> 其实这里的问题也很简单，翻阅 <code>package-lock.json</code> 文件，里面可以找到webpack中的依赖文件</p><a id="more"></a> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"ajv-keywords": &#123;</span><br><span class="line">      "version": "3.2.0",</span><br><span class="line">      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-3.2.0.tgz",</span><br><span class="line">      "integrity": "sha1-6GuBnGAs+IIa1jdBNpjx3sAhhHo="</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p> 这里面没有对应ajv的直接依赖包，这就导致了刚才的问题 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ajv-keywords@3.2.0 requires a peer of ajv@^6.0.0 but none is installed.</span><br></pre></td></tr></table></figure><p> 结局方法也比较简单，但是需要我们对 <code>package.json</code> 这个文件中的内容有所了解，这里面记录了包的版本依赖等控制信息，确保在任何平台下执行 <code>npm install</code> 后都可以得到相同的包。</p><p> <a href="https://juejin.im/entry/5ae00835518825673277e460" target="_blank" rel="noopener">掘金小手册</a></p><p> 在这里我们执行 <code>npm i -D ajv</code> 就可以</p><p> 当然了，这里面也有不少的坑</p><p> <a href="https://toutiao.io/posts/hrihhs/preview" target="_blank" rel="noopener">开发者头条</a></p><p> 以后增加或者删除依赖包，只能够通过 <code>package.json</code> 这一种方式，其他的方式都会被覆盖。</p>]]></content>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
